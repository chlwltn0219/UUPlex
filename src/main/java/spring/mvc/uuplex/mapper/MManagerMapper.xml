<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="spring.mvc.uuplex.movie.dao.ManagerDAO">
	
	<!--  예매 순위 리스트 -->
	<select id="getRanking" resultType="spring.mvc.uuplex.movie.dto.RankingDTO">

		select rownum as rank_num, movie_num, title1, releaseDate, cnt
		from (select r.movie_num, m.title1, m.releaseDate, sum(r.cnt) as cnt
		from m_reserv r,m_movie_info m
		where r.movie_num = m.movie_num AND
		r.reserve_date BETWEEN sysdate-7 and sysdate
		group by r.movie_num, m.title1, m.releaseDate
		order by sum(r.cnt) desc)
    
	</select>
	
	<!--  전체 예매 수량 -->
	<select id="reserveCnt" resultType="int">
	
		select NVL(total,0) FROM
		(select sum(cnt) as total from m_reserv 
		where reserve_date BETWEEN sysdate-7 and sysdate)
		
	</select> 
		
	<!--  월별 매출 실적 -->
	<select id="getSales" parameterType="Map" resultType="spring.mvc.uuplex.movie.dto.SalesDTO">
	
		select year_month||'/01' as year_month, sum(price) as sales
		from(
		select SUBSTR(reserve_date,1,5) as year_month ,price
		from m_reserv
		WHERE reserve_date between #{startDate} and #{endDate})
		group by year_month
		order by year_month
		
	</select>
	
	<!-- 스크린 쿼터  -->
	<select id="getScreenQuota" parameterType="String" resultType="spring.mvc.uuplex.movie.dto.ScreenQuotaDTO">
	
		SELECT theater, count(dayCnt) AS dayCnt
		from(
		select DISTINCT s.theater_num AS theater, '20'||SUBSTR(s.showtime,1,8) AS dayCnt, i.country 
		from m_movie_info i, m_schedule s
		where i.movie_num = s.movie_num 
		and i.country = '한국')
		where dayCnt LIKE #{year}||'%'
		group by theater
		
	</select>
	
	<!--  예매율 top 5 -->
	<select id="getTopFive" resultType="spring.mvc.uuplex.movie.dto.MovieInfoDTO">

		select movie_num, title1, title2, director, starring, genre, MPAARating, productionYear, runTime, releaseDate, 
        poster, movie_img1, movie_img2, trailer, status, synopsis, country, cnt 
    	from (select m.*, sum(r.cnt) as cnt
		from m_reserv r, m_movie_info m
		where r.movie_num = m.movie_num AND
		r.reserve_date BETWEEN sysdate-7 and sysdate
		group by  m.movie_num, title1, title2, director, starring, genre, MPAARating, productionYear, runTime, releaseDate, 
              poster, movie_img1, movie_img2, trailer, status, synopsis, country
		order by sum(r.cnt) desc)
    	where rownum BETWEEN 1 and 5 AND
		status = '상영중'
    
	</select>
	
	<!-- 최신 개봉작 리스트 -->
	<select id="getLatestMovie" resultType="spring.mvc.uuplex.movie.dto.MovieInfoDTO">
		select * from(
		select  *  from m_movie_info 
		order by releaseDate DESC)
		where rownum BETWEEN 1 and 5 AND
		status = '상영중'
	
	</select>
	
	<!-- 연령별 예매 -->
	<select id="ageRange" parameterType="int" resultType="spring.mvc.uuplex.movie.dto.AgeRangeDTO">
		SELECT DISTINCT rng
		  , COUNT(*) OVER (PARTITION BY rng) num
		FROM 
		(select m.age,m.memid
		from m_reserv r, member m
		where r.memId = m.memId AND 
		r.reserve_date BETWEEN sysdate-7 and sysdate AND
		movie_num = #{movie_num})
		INNER JOIN (
		  select '20-29' rng, 20 rng_start, 29 rng_stop from dual
		  union (
		  select '30-39', 30, 39 from dual
		  ) union (
		  select '40-49', 40, 49 from dual
		  ) union (
		  select '50-59', 50, 59 from dual
		  ) union (
		  select '60+', 60, null from dual
		)) ON age BETWEEN nvl(rng_start, age) AND nvl(rng_stop, age)
		ORDER BY rng
	
	</select>
	
	<!-- 성별 예매 -->
	<select id="womanCnt" parameterType="int" resultType="int">
		
		select COUNT(gender) as gender
		from m_reserv r, member m
		where r.memId = m.memId AND 
		r.reserve_date BETWEEN sysdate-7 and sysdate AND
		m.gender = '여자' AND
		movie_num = #{movie_num}
	
	</select>
</mapper>